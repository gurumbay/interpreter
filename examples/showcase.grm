# =============================================
# DEMONSTRATION OF INTERPRETER CAPABILITIES
# Matches exactly what the C++ interpreter supports
# =============================================

# --------------------------
# 1. BASIC OUTPUT AND MATH
# --------------------------
print("=== BASIC OUTPUT AND MATH ===")

print("Hello, world!!!\n")

print("1 + 2 * 3 =", 1 + 2 * 3)    # 7
print("10 - 5 / 2 =", 10 - 5 / 2)  # 7.5
print("10 % 3 =", 10 % 3)          # 1 (modulo)
print("-(5 - 10) =", -(5 - 10))    # 5 (unary minus)

# --------------------------
# 2. ADVANCED OPERATOR PRECEDENCE
# --------------------------
print("\n=== ADVANCED OPERATOR PRECEDENCE ===")

# Power operator precedence and right associativity
print("2 + 3 * 4**2 =", 2 + 3 * 4**2)      # 50 (2 + 3 * 16)
print("2**3**2 =", 2**3**2)                 # 512 (2**(3**2))
print("(2**3)**2 =", (2**3)**2)             # 64 ((8)**2)

# Complex precedence combinations
print("1 + 2 * 3**2 - 4 / 2 =", 1 + 2 * 3**2 - 4 / 2)  # 17 (1 + 18 - 2)

# Unary operators with proper precedence
print("-2 * 3 =", -2 * 3)                   # -6
print("not 0 =", not 0)                     # 1 (true)
print("not 1 =", not 1)                     # 0 (false)

# --------------------------
# 3. VARIABLES AND ASSIGNMENT
# --------------------------
print("\n=== VARIABLES ===")
x = 10
y = 3
z = x * y
print("x =", x)
print("y =", y)
print("z = x * y =", z)   # 30

x = "String"
y = "concatenation"
z = x + " " + y
print(z)                  # String concatenation

# --------------------------
# 4. COMPARISONS AND LOGIC
# --------------------------
print("\n=== COMPARISONS ===")
print("5 > 3:", 5 > 3)      # 1.0 (true)
print("5 == 3:", 5 == 3)    # 0.0 (false)
print("5 != 3:", 5 != 3)    # 1.0 (true)
print("not 0:", not 0)      # 1.0 (true)
print("1 and 0:", 1 and 0)  # 0.0 (false)
print("1 or 0:", 1 or 0)    # 1.0 (true)

# Advanced logical precedence
print("1 + 2 == 3:", 1 + 2 == 3)        # 1.0 (true)
print("1 + 2 < 3 * 2:", 1 + 2 < 3 * 2)  # 1.0 (true, 3 < 6)
print("1 and 0 or 1:", 1 and 0 or 1)    # 1.0 (true)
print("0 or 1 and 0:", 0 or 1 and 0)    # 0.0 (false)

# --------------------------
# 5. CONDITIONALS (IF-ELSE)
# --------------------------
print("\n=== CONDITIONALS ===")
a = 10
print("a =", a)
if a > 5:
    print("a is greater than 5")
else:
    print("a is 5 or less")

if "":
    print("This won't print")
else:
    print("Empty string is false")

# Nested if
b = 15
if a > 5:
    if b > 10:
        print("Both conditions true")

# Complex conditional with precedence
c = 7
if c > 5 and c < 10:
    print("c is between 5 and 10")

if not (c < 5):
    print("c is not less than 5")

# --------------------------
# 6. WHILE LOOPS
# --------------------------
print("\n=== WHILE LOOPS ===")
counter = 3
while counter > 0:
    print(counter)
    counter = counter - 1

# With break/continue
print("\nWhile with break/continue:")
i = 0
while i < 5:
    i = i + 1
    if i == 2:
        continue
    if i == 4:
        break
    print(i)

# --------------------------
# 7. FOR LOOPS WITH RANGE
# --------------------------
print("\n=== FOR LOOPS ===")
# Basic range
print("range(5):")
for i in range(5):
    print(i)

# Range with start/stop
print("\nrange(2, 5):")
for i in range(2, 5):
    print(i)

# Range with step
print("\nrange(0, 10, 2):")
for i in range(0, 10, 2):
    print(i)

# With break/continue
print("\nFor with break/continue:")
for i in range(10):
    if i % 2 == 0:
        continue
    if i > 7:
        break
    print(i)

# --------------------------
# 8. STRING OPERATIONS
# --------------------------
print("\n=== STRING OPERATIONS ===")
s1 = "Hello"
s2 = "Gurumbay"
print(s1 + " " + s2)      # Concatenation
print(s1[0])              # Indexing: 'H'

# --------------------------
# 9. LISTS AND MEMBER ACCESS
# --------------------------
print("\n=== LISTS AND MEMBER ACCESS ===")
numbers = [1, 2, 3, 4, 5]
print("numbers =", numbers)
print("numbers[2] =", numbers[2])        # Indexing: 3
print("numbers.length =", numbers.length) # Member access: 5

# String member access
text = "Hello World"
print("text =", text)
print("text.length =", text.length)      # Member access: 11

# --------------------------
# 10. COMPLEX EXPRESSIONS WITH PROPER PRECEDENCE
# --------------------------
print("\n=== COMPLEX EXPRESSIONS ===")

# Test all precedence levels working together
complex1 = 1 + 2 * 3**2 - 4 / 2
print("1 + 2 * 3**2 - 4 / 2 =", complex1)  # 17 (1 + 18 - 2)

# Test parentheses override precedence
complex2 = (1 + 2) * 3
print("(1 + 2) * 3 =", complex2)  # 9 (3 * 3)

# Test logical precedence with arithmetic
complex3 = 5 > 3 and 2 < 4
print("5 > 3 and 2 < 4 =", complex3)  # 1 (true)

# Test unary with binary
complex4 = -2 * 3 + 1
print("-2 * 3 + 1 =", complex4)  # -5 (-6 + 1)

print("\n=== SHOWCASE COMPLETED SUCCESSFULLY ===")
